{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "MainNotesComponent",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "1",
    "key": "1424caa3-2102-49dc-abf6-6aef966076f2",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Router = universe.ReactRouterDomRouter;\n      const Route = universe.ReactRouterDomRoute;\n      const Switch = universe.ReactRouterDomSwitch;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        render(){\n          return (\n            <div>\n              ErrorLoading\n            </div>\n          )\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            notes: []\n          }\n        }\n        \n        componentDidMount(){\n          \n          console.log('Loaded MainNotesComponent');\n          \n          this.fetchNotes();\n            \n        }\n        \n        @autobind\n        fetchNotes(){\n          // simply loading from localstorage for now \n          let notes = universe.localStorage.getItem('tmp_notes_1');\n          try {\n            notes = JSON.parse(notes);\n          }catch(err){\n            notes = null;\n          }\n          \n          notes = notes || [];\n          \n          this.setState({\n            notes\n          })\n        }\n        \n        @autobind\n        addNote(){\n          \n          let text = WINDOW.prompt('', '');\n          if(!text){\n            return false;\n          }\n          \n          let notes = this.state.notes;\n          \n          notes.push({\n            _id: universe.uuidv4(),\n            name: universe.uuidv4(),\n            type: 'string:Qmsfjldl', // TODO: markdown \n            data: {\n              string: text\n            }\n          });\n          \n          this.setState({\n            notes\n          },this.updateLocalStorage);\n          \n        }\n        \n        @autobind\n        handleUpdateNote(noteIdx){\n          \n          let notes = this.state.notes;\n          let note = notes[noteIdx];\n          \n          let text = WINDOW.prompt('', note.data.string);\n          if(!text){\n            return false;\n          }\n          \n          note.data.string = text;\n          \n          this.setState({\n            notes\n          },this.updateLocalStorage);\n          \n        }\n        \n        @autobind\n        handleRemoveNote(e, noteIdx){\n          \n          e.stopPropagation();\n          \n          let notes = JSON.parse(JSON.stringify(this.state.notes));\n          \n          notes.splice(noteIdx,1);\n          \n          this.setState({\n            notes\n          },this.updateLocalStorage);\n          \n          return false;\n          \n        }\n        \n        @autobind\n        updateLocalStorage(){\n          let notes = JSON.stringify(this.state.notes);\n          // console.log('updateLocalStorage notes:', notes);\n          universe.localStorage.setItem('tmp_notes_1', notes);\n        }\n        \n        render(){\n          \n          return (\n            <div className=\"container\">\n              <div className=\"columns\">\n                <div className=\"column is-3\">\n                \n                  <br />\n                  \n                  <h2>\n                    <button className=\"button is-info\" onClick={this.addNote}>\n                      + Note\n                    </button>\n                  </h2>\n                  \n                  <br />\n                  \n                  <div>\n                    {\n                      this.state.notes.map((note,idx)=>(\n                        <div key={note._id} style={{paddingBottom:\"8px\"}}>\n                          <div className=\"box\" onClick={e=>this.handleUpdateNote(idx)} style={{position:'relative'}}>\n                            <span className=\"delete\" style={styles.deleteIcon} onClick={e=>this.handleRemoveNote(e, idx)}></span>\n                            {note.data.string}\n                          </div>\n                        </div>\n                      ))\n                    }\n                  </div>\n                  \n                </div>\n                \n              </div>\n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      const styles = {\n        deleteIcon: {\n          position: 'absolute',\n          top: '0px',\n          right: '-24px',\n          cursor: 'pointer'\n        }\n      }\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainNotesComponent"
  }
}