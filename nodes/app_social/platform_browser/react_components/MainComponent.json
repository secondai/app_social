{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "MainComponent",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "2",
    "key": "3ae95ba5-2d74-4fa4-846d-768b503c398b",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Router = universe.ReactRouterDomRouter;\n      const Route = universe.ReactRouterDomRoute;\n      const Switch = universe.ReactRouterDomSwitch;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      let ErrorComponent = (name) => {\n        return class ErrorComponent extends React.Component {\n          constructor(props){\n            super(props);\n          }\n          render(){\n            return (\n              <div>\n                ErrorLoading: {name || 'unknown'}\n              </div>\n            )\n          }\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            \n          }\n        }\n        \n        componentDidMount(){\n          \n          console.log('MainComponent didMount');\n          \n          this.startUp();\n            \n            \n        }\n        \n        @autobind\n        async startUp(){\n          \n            // Fetch default nodes (Language NodeChain, Identity, etc.) \n            await this.fetchDefaultNodes();\n            \n            await this.loadComponents();\n            \n            console.log('MainComponent loaded startUp');\n          \n        }\n        \n        @autobind\n        async loadComponents(){\n          \n          // Not async for setState! \n          \n          let components = [\n            'DefaultLayout',\n            'MainHomeComponent',\n            'MainGroupsComponent',\n            'MainConnectionsComponent',\n          ];\n          \n          for(let componentInternalId of components){\n            try {\n                \n              let Component = await this.props.loadComponent({\n                internalId: componentInternalId\n              });\n              let obj = {};\n              obj[componentInternalId] = Component;\n              this.setState(obj)\n              // console.log(componentInternalId,Component);\n              \n            }catch(err){\n              console.error(\"Failed loading component:\",componentInternalId);\n            }\n          }\n          \n        }\n        \n        @autobind\n        async fetchDefaultNodes(){\n          // used elsewhere in the app \n          \n          // Cloud Second's main identity, from internal \n          let ExternalIdentityNodes = await universe.searchMemory({\n            filter: {\n              sqlFilter: {\n                type: 'external_identity:0.0.1:local:8982f982j92',\n                data: {\n                  commonName: 'main'\n                }\n              }\n            }\n          });\n          let OwnerSecondExternalIdentityNode = ExternalIdentityNodes[0];\n          this.props.setState({\n            OwnerSecondExternalIdentityNode\n          });\n          \n          // Language NodeChain \n          // - from ExternalIdentityNodes \n          // - this is the default \"find a node on the remote\" action \n          let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n            type: 'standard_capability_action:0.0.1:local:298j291bs',\n            data: {\n              action: 'send',\n              options: {\n                ExternalIdentityNode: OwnerSecondExternalIdentityNode,\n                RequestNode: {\n                  type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                  data: {\n                    actions: [\n                      {\n                        matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                        dataForAction: {\n                          type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                          data: {\n                            matchFunctionNode: {\n                              // query here!\n                              // action_pointer:0.0.1:local:238972ncr\n                              type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                              data: {\n                                code: `(()=>{\n                                  // Action \n                                  // - childNode common_type:0.0.1:local:298fh29h2323f == \"action\" \n                                  \n                                  let inputNode = INPUT.data.inputNode;\n                                  \n                                  // must be root level (TODO, move somewhere sensible?) \n                                  if(inputNode.nodeId){\n                                    return false;\n                                  }\n                                  \n                                  if(inputNode.type.split(':')[0] != 'node_chain_info'){\n                                    return false;\n                                  }\n                                  \n                                  // get our default dev@second nodechain \n                                  if(inputNode.data.username != 'dev@second'){\n                                    return false;\n                                  }\n                                  if(inputNode.data.network != 'test'){\n                                    return false;\n                                  }\n                                  \n                                  return inputNode;\n                                  \n                                })()`\n                              }\n                            },\n                          }\n                        }\n                      }\n                    ]\n                    \n                  }\n                }\n              }\n            }\n          });\n          \n          let LanguageChainNodes = response.data.actionResponses[0].data;\n          let LanguageChainNode = LanguageChainNodes[0];\n          \n          console.log('LanguageChainNode (default)', LanguageChainNode);\n          \n          this.props.setState({\n            LanguageChainNode\n          });\n          \n        }\n        \n        render(){\n          \n          const DefaultLayout = this.state.DefaultLayout || ErrorComponent('DefaultLayout');\n          const MainHomeComponent = this.state.MainHomeComponent || ErrorComponent('MainHomeComponent');\n          const MainGroupsComponent = this.state.MainGroupsComponent || ErrorComponent('MainGroupsComponent');\n          const MainConnectionsComponent = this.state.MainConnectionsComponent || ErrorComponent('MainConnectionsComponent');\n          \n          return (\n            <Router>\n              <Switch>\n              \n                <DefaultLayout exact path=\"/\" component={MainHomeComponent}/>\n                <DefaultLayout exact path=\"/groups\" component={MainGroupsComponent}/>\n                <DefaultLayout exact path=\"/connections\" component={MainConnectionsComponent}/>\n                \n              </Switch>\n            </Router>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainComponent"
  }
}